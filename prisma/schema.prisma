datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // new
  documents     Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  // locolazation
  id            String    @id @default(cuid())
  ownerId       String
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  // customization
  title         String
  cards         Card[]
  language      String    @db.VarChar(4) @default("EN") // EN for english
  color         String    @default("red")
}
model Card {
  // Locolazation
  id            String    @id @default(cuid())
  documentId    String    
  document      Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  // Customization
  identifier    String?   @db.VarChar(8)
  fields        Field[]
}
model Field {
  id            String    @id @default(cuid())
  cardId        String
  card          Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  // Customization
  content       String
  type          String
}